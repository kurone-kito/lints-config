env:
  es2024: true
  node: true
extends:
  # see: https://github.com/eslint/eslint-plugin-markdown/issues/243
  - plugin:markdown/recommended-legacy
  - plugin:yaml/recommended
  - plugin:json/recommended
  - plugin:editorconfig/noconflict
  - plugin:@cspell/recommended
  - plugin:jsdoc/recommended
  - plugin:node/recommended
  - eslint:recommended
  - plugin:import/recommended
  - plugin:import/typescript
  - plugin:@typescript-eslint/recommended
  - plugin:@typescript-eslint/stylistic
  # Because we want to apply the Airbnb rules as much as possible,
  # we have placed them closer to the end.
  - airbnb-typescript/base
  - prettier
overrides:
  - env:
      jest: true
    files:
      - '**/*.spec.?([cm])[jt]s'
      - '**/*.test.?([cm])[jt]s'
  - files:
      - '*.?(c)js'
    rules:
      # Allow `require` syntax only for JavaScript. By default,
      # it is completely prohibited.
      # There are many situations where JavaScript is used outside the
      # scope of transpiling, such as in various configuration files,
      # making the `import` syntax challenging to use.
      '@typescript-eslint/no-var-requires': 'off'
  - files:
      - '*.?([cm])js'
    rules:
      # Allow type inference of return values of exported functions, etc.,
      # only for JavaScript. By default, it is allowed with a warning.
      # There are many situations where JavaScript is used outside the
      # scope of transpiling, such as in various configuration files,
      # making the `import` syntax challenging to use.
      '@typescript-eslint/explicit-module-boundary-types': 'off'
  - extends:
      - plugin:markdownlint/recommended
    files:
      - '*.md'
parserOptions:
  ecmaFeatures:
    impliedStrict: true
  extraFileExtensions:
    - .json
  project:
    - tsconfig.json
rules:
  # With a warning, allow use standard import syntax to import for type-
  # only. The default is to enable it unconditionally. Tree shaking at
  # build time needs to work correctly to reduce bundle size, and active
  # use of the type import syntax can contribute significantly to this.
  '@typescript-eslint/consistent-type-imports': warn
  # With a warning, allow type inference for return values of functions
  # and methods referenced from other files, including public methods
  # in exported functions and classes. Default is unconditional allow.
  # Allowing this may cause TypeScript to chain type inference from the
  # wrong type if it does not read the type definition correctly,
  # resulting in type errors in the wrong places.
  '@typescript-eslint/explicit-module-boundary-types': warn
  # Permit explicit statements in Arrow functions, even when the block is
  # optional, with a warning. The default is unconditional allow.
  # The intent is to reduce the amount of code and keep it simple,
  # thereby improving readability.
  arrow-body-style: warn
  # Forces import without extensions for internal modules only. The default
  # is full enforcement. Because it interferes with imports such as
  # lodash-es in the ES modules environment.
  import/extensions:
    - error
    - never
    - js: ignorePackages
      json: ignorePackages
  # Prohibit dependencies on `devDependencies`, except for specific
  # files. By default, this is a total ban. There is no need for
  # strict separation of dependent packages since they are internally
  # tree shaken by bundlers. Still, some packages are separated into
  # `devDependencies` to make it easier to organize.
  import/no-extraneous-dependencies:
    - error
    - devDependencies:
        - '**/*.config.?([cm])[jt]s'
        - '**/*.spec.?([cm])[jt]s'
        - '**/*.test.?([cm])[jt]s'
        - '**/jest.*.?([cm])[jt]s'
        - '**/scripts/*.?([cm])[jt]s'
  # Allow with a warning that the arbitrary reordering in the
  # import syntax. The default is to allow it unconditionally.
  # in order to deal with the snowballing problem of the import part.
  import/order:
    - warn
    - alphabetize:
        order: asc
        caseInsensitive: true
      groups:
        - builtin
        - external
        - internal
        - parent
        - sibling
        - index
        - object
      newlines-between: never
  # Allow unconditional type specification of the arguments in JSDoc.
  # The default is a blanket ban. Because in TypeScript projects,
  # it can be inferred from the type definitions in the code.
  # TODO: If there are any inconveniences in document generation,
  # TODO: the below rule will be removed.
  jsdoc/require-param-type: 'off'
  # Allow unconditional type specification of the return value in JSDoc.
  # The default is a blanket ban. Because in TypeScript projects,
  # it can be inferred from the type definitions in the code.
  # TODO: If there are any inconveniences in document generation,
  # TODO: the below rule will be removed.
  jsdoc/require-returns-type: 'off'
  # Unconditional permission to import modules that do not exist. The
  # default is total prohibition, a temporary measure to support ESM-style
  # module resolution in TypeScript.
  node/no-missing-import: off
  # Allows the use of unsupported Node.js notation.
  # Unconditional prohibition by default. All Node.js versions prohibit
  # dynamic imports, and the rule is already obsoleted.
  node/no-unsupported-features/es-syntax: off
  # Allow arbitrary reordering of multiple exports in the import syntax,
  # with a warning. The default is to allow it unconditionally.
  # in order to deal with the snowballing problem of the import part.
  sort-imports:
    - warn
    - ignoreCase: true
      ignoreDeclarationSort: true
settings:
  # ? I've installed `eslint-import-resolver-node`, but
  # ? if I don't put it directly in `devDependencies`, Linter
  # ? gives me some inexplicable errors. Also, if you include `node: {}`
  # ? in the configuration, it provides another inexplicable error.
  # ? see: https:#github.com/airbnb/javascript/issues/1730
  import/resolver:
    typescript:
      alwaysTryTypes: true
